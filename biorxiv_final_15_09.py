# -*- coding: utf-8 -*-
"""Biorxiv_final_15/09.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dpcQlHI-sNu3j82auq4s1dAxRYB6A_rh
"""

!pip install sqlalchemy
!pip install faiss-cpu
!pip install tiktoken
!pip install langchain-experimental
!pip install langchain-community
!pip install langchain-openai
!pip install langchain
!pip install streamlit
import pandas as pd
import sqlite3
from sqlalchemy import create_engine
from langchain_experimental.agents.agent_toolkits import create_csv_agent,create_pandas_dataframe_agent
from langchain_community.document_loaders.csv_loader import CSVLoader
import pandas as pd
from langchain_openai import ChatOpenAI
import pandas as pd
from langchain.memory import ConversationBufferMemory
from langchain.prompts import PromptTemplate
import streamlit as st
import os

# Path to your SQLite database
database_path = 'biorxiv_database.db'  # Replace with your SQLite file path

# Create connection string for SQLite
connection_string = f'sqlite:///{database_path}'

# Create the engine
engine = create_engine(connection_string)

# Load data from SQL to DataFrame
query = 'SELECT * FROM Biorixiv_cancer_data'  # Specify your table name
df = pd.read_sql(query, engine)

# Display first few rows of the DataFrame
df.head()

#Prompt the user to input an api key for os.environ
os.environ["OPENAI_API_KEY"] = input("Please enter your OpenAI API key: ")
llm=ChatOpenAI(temperature=0.7)
#Initialize memory to keep track of conversation history
memory = ConversationBufferMemory()
# Define a prompt template to ensure comprehensive responses
# Define a prompt template to ensure comprehensive responses
prompt_template = PromptTemplate(
    input_variables=["query"],
    template="You are a research assistant. Given the following dataset, whe you are asked questions about a particular topic search all the columns in the dataframe and if the specifc condition isn't found, provide answers about diseases that closely relate to the uer's question.")

agent_executor = create_pandas_dataframe_agent(llm, df, verbose=True,allow_dangerous_code=True,prompt_template=prompt_template,handle_parsing_errors=True)

# Query the agent with a natural language question
user_query=input("Ask any question about the data")
result=agent_executor.invoke(f"{user_query} and provide links from the context")
print(result)